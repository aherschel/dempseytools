[{"/Users/alharris/apps/dempseytools/src/index.tsx":"1","/Users/alharris/apps/dempseytools/src/serviceWorker.ts":"2","/Users/alharris/apps/dempseytools/src/App.tsx":"3","/Users/alharris/apps/dempseytools/src/aws-exports.js":"4","/Users/alharris/apps/dempseytools/src/components/AppFooter.tsx":"5","/Users/alharris/apps/dempseytools/src/pages/ToolsPage.tsx":"6","/Users/alharris/apps/dempseytools/src/components/ToolTile.tsx":"7","/Users/alharris/apps/dempseytools/src/components/AppHeader.tsx":"8"},{"size":451,"mtime":1592181553072,"results":"9","hashOfConfig":"10"},{"size":4898,"mtime":1608494008072,"results":"11","hashOfConfig":"10"},{"size":1080,"mtime":1608495584591,"results":"12","hashOfConfig":"10"},{"size":213,"mtime":1592185125496,"results":"13","hashOfConfig":"10"},{"size":541,"mtime":1608494137578,"results":"14","hashOfConfig":"10"},{"size":915,"mtime":1608495079413,"results":"15","hashOfConfig":"10"},{"size":705,"mtime":1608494165392,"results":"16","hashOfConfig":"10"},{"size":335,"mtime":1608494100354,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1arpedw",{"filePath":"21","messages":"22","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"20"},"/Users/alharris/apps/dempseytools/src/index.tsx",[],["43","44","45","46","47"],"/Users/alharris/apps/dempseytools/src/serviceWorker.ts",["48","49","50","51","52","53","54","55","56"],"// @ts-nocheck\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n// @ts-ignore\nconst registerValidSW = (swUrl, config) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        // @ts-ignore\n        installingWorker.onstatechange = () => {\n          // @ts-ignore\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n};\n\n// @ts-ignore\nconst checkValidServiceWorker = (swUrl, config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        // @ts-ignore\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n};\n\nexport const register = (config: any) => {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    // @ts-ignore\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nexport const unregister = () => {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n};\n","/Users/alharris/apps/dempseytools/src/App.tsx",["57"],"import React, { lazy, Suspense } from \"react\";\nimport Amplify from \"aws-amplify\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport awsExports from \"./aws-exports\";\n\nconst ToolsPage = lazy(() => import(\"./pages/ToolsPage\"));\nconst AppHeader = lazy(() => import(\"./components/AppHeader\"));\nconst AppFooter = lazy(() => import(\"./components/AppFooter\"));\n\nAmplify.configure(awsExports);\n\nconst renderLoader = () => <p>Loading</p>;\n\n/**\n * The top-level App component is responsible for a few key things, including setting up\n * authentication, routing, and other global state required for the app.\n */\nconst App = () => {\n  return (\n    <Suspense fallback={renderLoader()}>\n      <Router>\n        <div>\n          <AppHeader />\n          <Container>\n            <Switch>\n              <Route path=\"/\">\n                <ToolsPage />\n              </Route>\n            </Switch>\n          </Container>\n          <AppFooter />\n        </div>\n      </Router>\n    </Suspense>\n  );\n};\n\nexport default App;\n","/Users/alharris/apps/dempseytools/src/aws-exports.js",[],["58","59","60","61","62"],"/Users/alharris/apps/dempseytools/src/components/AppFooter.tsx",["63"],"import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport { FaGithub } from \"react-icons/fa\";\n\nconst AppFooter = () => {\n  return (\n    <Navbar sticky=\"bottom\" bg=\"dark\" variant=\"dark\">\n      <Container>\n        <Nav>\n          <Nav.Link href=\"https://github.com/aherschel/dempseytools\">\n            View Source <FaGithub />\n          </Nav.Link>\n        </Nav>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default AppFooter;\n","/Users/alharris/apps/dempseytools/src/pages/ToolsPage.tsx",["64"],"import React from \"react\";\nimport ToolTile from \"../components/ToolTile\";\n\nconst ToolsPage = () => {\n  return (\n    <>\n      <br />\n      <ToolTile\n        name=\"Koffie\"\n        description=\"A tool which helps you manage your rotation of long-tail friends.\"\n        linkUrl=\"https://koffie.link\"\n        logoUrl=\"/coffee-logo.png\"\n      />\n      <ToolTile\n        name=\"Tacomaroke\"\n        description=\"A tool which provides utilities to support a variety of karaoke.\"\n        linkUrl=\"https://tacomaroke.com\"\n        logoUrl=\"/mic-logo.png\"\n      />\n      <ToolTile\n        name=\"CookiesCookies\"\n        description=\"...\"\n        linkUrl=\"https://cookiescookies.net\"\n        logoUrl=\"/cookie-logo.png\"\n      />\n      <ToolTile\n        name=\"Dempsey Tools\"\n        description=\"This site! Mainly just an index of other projects.\"\n        logoUrl=\"/tool-logo.png\"\n      />\n    </>\n  );\n};\n\nexport default ToolsPage;\n","/Users/alharris/apps/dempseytools/src/components/ToolTile.tsx",["65"],"import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\n\ninterface ToolTileProps {\n  name: string;\n  description: string;\n  linkUrl?: string;\n  logoUrl: string;\n}\n\nconst ToolTile = (props: ToolTileProps) => {\n  const { name, description, linkUrl, logoUrl } = props;\n  return (\n    <Jumbotron>\n      <h3>\n        <img src={logoUrl} alt={name} width={24} height={24} /> {name}\n      </h3>\n      <p>{description}</p>\n      {linkUrl && (\n        <Button variant=\"primary\" href={linkUrl}>\n          Check it out!\n        </Button>\n      )}\n    </Jumbotron>\n  );\n};\n\nToolTile.defaultProps = {\n  linkUrl: undefined,\n};\n\nexport default ToolTile;\n",["66","67","68","69","70"],"/Users/alharris/apps/dempseytools/src/components/AppHeader.tsx",["71"],"import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\n/**\n * Component responsible for rendering the nav bar on all app pages.\n */\nconst AppHeader = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\">\n      <Navbar.Brand>Dempsey Tools</Navbar.Brand>\n    </Navbar>\n  );\n};\n\nexport default AppHeader;\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":39,"column":15,"nodeType":"84","messageId":"85","endLine":39,"endColumn":26},{"ruleId":"82","severity":1,"message":"83","line":49,"column":15,"nodeType":"84","messageId":"85","endLine":49,"endColumn":26},{"ruleId":"82","severity":1,"message":"83","line":61,"column":7,"nodeType":"84","messageId":"85","endLine":61,"endColumn":20},{"ruleId":"82","severity":1,"message":"83","line":88,"column":7,"nodeType":"84","messageId":"85","endLine":88,"endColumn":18},{"ruleId":"86","severity":1,"message":"87","line":94,"column":25,"nodeType":"88","messageId":"89","endLine":94,"endColumn":41},{"ruleId":"86","severity":1,"message":"90","line":94,"column":26,"nodeType":"91","messageId":"92","endLine":94,"endColumn":37},{"ruleId":"93","severity":1,"message":"94","line":94,"column":34,"nodeType":"95","messageId":"96","endLine":94,"endColumn":37,"suggestions":"97"},{"ruleId":"82","severity":1,"message":"83","line":116,"column":11,"nodeType":"84","messageId":"85","endLine":116,"endColumn":22},{"ruleId":"86","severity":1,"message":"87","line":129,"column":27,"nodeType":"88","messageId":"89","endLine":129,"endColumn":32},{"ruleId":"86","severity":1,"message":"87","line":19,"column":13,"nodeType":"88","messageId":"89","endLine":19,"endColumn":18},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"86","severity":1,"message":"87","line":7,"column":19,"nodeType":"88","messageId":"89","endLine":7,"endColumn":24},{"ruleId":"86","severity":1,"message":"87","line":4,"column":19,"nodeType":"88","messageId":"89","endLine":4,"endColumn":24},{"ruleId":"86","severity":1,"message":"87","line":12,"column":18,"nodeType":"88","messageId":"89","endLine":12,"endColumn":43},{"ruleId":"72","replacedBy":"98"},{"ruleId":"74","replacedBy":"99"},{"ruleId":"76","replacedBy":"100"},{"ruleId":"78","replacedBy":"101"},{"ruleId":"80","replacedBy":"102"},{"ruleId":"86","severity":1,"message":"87","line":7,"column":19,"nodeType":"88","messageId":"89","endLine":7,"endColumn":24},"lines-around-directive",["103"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'config' should be typed with a non-any type.","Identifier","anyTypedArg","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["104","105"],["103"],[],[],[],[],"padding-line-between-statements",{"messageId":"106","fix":"107","desc":"108"},{"messageId":"109","fix":"110","desc":"111"},"suggestUnknown",{"range":"112","text":"113"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"112","text":"114"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[3369,3372],"unknown","never"]